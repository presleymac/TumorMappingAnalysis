function [macro_im, tissue_outline_im]= Step3_macrophage_post_processing_function(image_folder_path, ...
    image_name, pre_processed_dir_name, post_processed_dir_name, ...
    vessel_seg, macrophage_seg, macrophage_final_name_str, tissue_outline_save_name, tissue_outline)

%%%% step3_macrophage_post_processing_function %%%%

% This function is used to to process segmented macrophage images. Images are
% processed by removing tissue background, cleaning up features through the
% removal of noise and then ultimately undergo a series of processing stepts
% to clean up the resultant feature boundarys. The final product is saved as
% tiff file.
%
% Disclaimer:
% All images processed with this function are expected to have first undergone
% processing step 1 - convert_czi_to_omi_tiff_func.m. These images should have
% undergone image segmentation where tt hey are have saved into a pre processed
% image folder contained within folders generated by step1.
%
%
% Args:
%
% image_folder_path (char): The full path to the image folder containing a
% subfolder for allthe images to be processed. Image subfolders were
% generated in processing step 1.
%
% image_name (char): string that defines the image_folder to be
% processed. Example: 'ANIMAL' to identify image folders ANIMAL_1.
%
% pre_processed_dir_name(char): character string idicating the name of the
% subfolder where segmented images are stored. Example 'Segmentation_Dir'
%
% post_processed_dir_name (char): character string idicating the name of the
% subfolder where segmented images are stored. Example 'Processed_Images'
%
% vessel_seg (unit8): vessel_segmentation_image. Assumes within the
% segmentaion image tissue_background is labeled = 0, vessels =1 and empty
% space =2
%
% macrophage_seg (unit8): Macrophage segmentation image. Assumes background
% is labeled = 0 and macrophages =1.
%
% macrophage_final_name_str (char): The desired name of the final image
% including the file format.
%
% Optional:
% tissue_outline_image (unit16):  tissue_outline_image prevents tissue_outline
% image from being generated

if ~exist('tissue_outline','var')
    % third parameter does not exist, so default it to something
    tissue_outline = 'tissue_outline_not_provided';
    
end

cd (image_folder_path)

display (['Processing macrophages ' image_name])
image_folder_dir = strcat(image_folder_path,'\', image_name);
cd(image_folder_dir)

%possible image directory folders
pre_processed_dir = strcat(image_folder_dir, '/', pre_processed_dir_name);
post_processing_dir= strcat(image_folder_dir, '/', post_processed_dir_name);


%Check to see if the defined post_processing_dir exists and if not make
%it
if exist(post_processing_dir , 'dir')~=7
    mkdir(post_processing_dir);
end

if exist(pre_processed_dir, 'dir') ~=7
    mkdir(pre_processed_dir);
end

%%
%Section 2: find pre_processed_images and begin loading the variables.
%Note tissue outlines are defined in the vessel images thus we load the
%macrophage and vessel images into the script.

%all vessels are stained with Cy3 = Channel 3
%all macrophages are stained with Cy5 = Channel 4
%Dapi was not used to label the tissue as not all tissues were DAPI
%stained.


tissue_outline_name = strcat(image_name,tissue_outline_save_name);


%%%%Tissue Outline%%%%

%If tissue outline does not exist we make the tissue outline by
%loading in the vessel channel and filling holes in the tissue.
%label_3 in vessel images is background (everything that is not
%tissue)

%If we have not already created a tissue outline image we generate one
%by filling tissue holes and eroding then dilating the image. We then
%write the issue outline image to a .tiff file

cd(post_processing_dir)
if ischar(tissue_outline) ==1
    cd(pre_processed_dir)
    vessels = vessel_seg;
    not_tissue_only = (vessels ~= 3);
    fill_holes = imfill(not_tissue_only, 'holes');
    se = strel('sphere', 5);
    tissue_erode = imerode(fill_holes, se);
    tissue_dil = imdilate(tissue_erode, se);
    majority = bwmorph3(tissue_dil, 'majority');
    closed = imclose(majority, se);
    
    tissue = (closed == 0); %swap labels to identify tissue)
    tissue_area = uint16(tissue);
    
    num_slices = size(tissue_area,3);
    
    cd(post_processing_dir)
    tissue_name= tissue_outline_name;
    clear options;
    options.overwrite = true;
    options.compress = 'lzw';
    saveastiff(uint16(tissue_area), tissue_name, options);

else
    tissue_area = tissue_outline;
    
end


%%%%% Macrophage %%%%%


macro_seg = macrophage_seg;
% Images are all binary unit8 with values of 0 and 255. Here we
% threshold the images and transform it to a logical data type so
% the values are either 0 =  background or 1 = feature.

if max(max(max(macro_seg)))== 255
    macro_seg = ~(threshold(macro_seg));
    macro_seg = logical(macro_seg);
end
macro_ch = macro_seg == 1;
vessels_only = vessel_seg == 1;

% to avoid any flourescence signal overlab between our different
% tumours we remove any pixels identifed in the segmentation that
% are also labeled in the vessel channel.

macro_only = (macro_ch - vessels_only)==1;

%Here we set a filter size and then use this to remove any noise in
%the segmentation before dilating the idenified macrophage signal
remove_sm_noise = bwareaopen(macro_only, 18, 26);

%Here we use dipimage to perform a Euclidean distance transform,
%generate "seeds" for the macrophage image and then use these to
%generate our final dilated macrophages.

se = strel('sphere', 1);
dil_noise_free = imdilate(remove_sm_noise, se);
D = bwdist(~dil_noise_free);
D = -D;

dt_thresh_dil =  dt(remove_sm_noise);
seeds = maxima(dt_thresh_dil,2,0);
seeds2 = dilation(seeds,4.5)>0;
im_out = waterseed(seeds2, max(dt_thresh_dil)-dt_thresh_dil,2,0,0);
threshmacro_im = dil_noise_free;
threshmacro_im(im_out) = false;
thresh_macro_open = opening(threshmacro_im, 3, 'elliptic');
thresh_macro_open = uint16(thresh_macro_open);
dipshow(thresh_macro_open)
% finally we save the final images as a tiff
cd(post_processing_dir)

%write im
macro_file_name = macrophage_final_name_str;
clear options;
options.overwrite = true;
options.compress = 'lzw';
saveastiff(uint16(thresh_macro_open), macro_file_name, options);
toc

macro_im = thresh_macro_open;
tissue_outline_im = tissue_area;
end

